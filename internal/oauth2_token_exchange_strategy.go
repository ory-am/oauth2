// Copyright Â© 2022 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: strategy.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fosite "github.com/ory/fosite"
)

// MockClientAuthenticationStrategy is a mock of ClientAuthenticationStrategy interface.
type MockClientAuthenticationStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockClientAuthenticationStrategyMockRecorder
}

// MockClientAuthenticationStrategyMockRecorder is the mock recorder for MockClientAuthenticationStrategy.
type MockClientAuthenticationStrategyMockRecorder struct {
	mock *MockClientAuthenticationStrategy
}

// NewMockClientAuthenticationStrategy creates a new mock instance.
func NewMockClientAuthenticationStrategy(ctrl *gomock.Controller) *MockClientAuthenticationStrategy {
	mock := &MockClientAuthenticationStrategy{ctrl: ctrl}
	mock.recorder = &MockClientAuthenticationStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientAuthenticationStrategy) EXPECT() *MockClientAuthenticationStrategyMockRecorder {
	return m.recorder
}

// CanSkipClientAuth mocks base method.
func (m *MockClientAuthenticationStrategy) CanSkipClientAuth(requester fosite.AccessRequester) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSkipClientAuth", requester)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanSkipClientAuth indicates an expected call of CanSkipClientAuth.
func (mr *MockClientAuthenticationStrategyMockRecorder) CanSkipClientAuth(requester interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSkipClientAuth", reflect.TypeOf((*MockClientAuthenticationStrategy)(nil).CanSkipClientAuth), requester)
}
