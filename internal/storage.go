// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/ory/fosite (interfaces: Storage)

// Copyright Â© 2017 Aeneas Rekkas <aeneas+oss@aeneas.io>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package internal

import (
	context "context"

	gomock "github.com/golang/mock/gomock"
	fosite "github.com/ory/fosite"
)

// Mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *_MockStorageRecorder
}

// Recorder for MockStorage (not exported)
type _MockStorageRecorder struct {
	mock *MockStorage
}

func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &_MockStorageRecorder{mock}
	return mock
}

func (_m *MockStorage) EXPECT() *_MockStorageRecorder {
	return _m.recorder
}

func (_m *MockStorage) GetClient(_param0 context.Context, _param1 string) (fosite.Client, error) {
	ret := _m.ctrl.Call(_m, "GetClient", _param0, _param1)
	ret0, _ := ret[0].(fosite.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageRecorder) GetClient(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetClient", arg0, arg1)
}
