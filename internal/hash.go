// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/ory/fosite (interfaces: Hasher)

// Copyright Â© 2017 Aeneas Rekkas <aeneas+oss@aeneas.io>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package internal

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Hasher interface
type MockHasher struct {
	ctrl     *gomock.Controller
	recorder *_MockHasherRecorder
}

// Recorder for MockHasher (not exported)
type _MockHasherRecorder struct {
	mock *MockHasher
}

func NewMockHasher(ctrl *gomock.Controller) *MockHasher {
	mock := &MockHasher{ctrl: ctrl}
	mock.recorder = &_MockHasherRecorder{mock}
	return mock
}

func (_m *MockHasher) EXPECT() *_MockHasherRecorder {
	return _m.recorder
}

func (_m *MockHasher) Compare(_param0 []byte, _param1 []byte) error {
	ret := _m.ctrl.Call(_m, "Compare", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockHasherRecorder) Compare(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Compare", arg0, arg1)
}

func (_m *MockHasher) Hash(_param0 []byte) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Hash", _param0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockHasherRecorder) Hash(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Hash", arg0)
}
